{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/christianguizar/projects/react-complete-guide/nextProject/pages/[meetupId]/index.js\",\n    _this = this;\n\nimport { Fragment } from 'react';\nimport Head from 'next/head';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nvar MeetupDetails = function MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, _this);\n}; //pre generates of all dynamic values for what the current page can become\n\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["/Users/christianguizar/projects/react-complete-guide/nextProject/pages/[meetupId]/index.js"],"names":["Fragment","Head","MeetupDetail","MeetupDetails","props"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAIA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAC/B,sBACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,WADF;AAID,CALD,C,CAOA;;;KAPMD,a;;AAoDN,eAAeA,aAAf","sourcesContent":["import { Fragment } from 'react';\nimport Head from 'next/head';\n\nimport { MongoClient, ObjectId } from 'mongodb';\n\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nconst MeetupDetails = (props) => {\n  return (\n    <Fragment>\n    </Fragment>\n  );\n}\n\n//pre generates of all dynamic values for what the current page can become\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect('mongodb+srv://cguizar525:Pokemon10@cluster0.bthpq.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n\n  const meetupsCollection = db.collection('meetups');\n\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n  client.close();\n\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: { meetupId: meetup._id.toString() },\n    }))\n  }\n}\n\nexport const getStaticProps = async (context) => {\n\n  const meetupId = context.params.meetupId;\n\n  const client = await MongoClient.connect('mongodb+srv://cguizar525:Pokemon10@cluster0.bthpq.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n\n  const meetupsCollection = db.collection('meetups');\n\n  const selectedMeetup = await meetupsCollection.findOne({_id: ObjectId(meetupId)});\n\n  client.close();\n\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title.toString(),\n        address: selectedMeetup.address.toString(),\n        image: selectedMeetup.image.toString(),\n        description: selectedMeetup.description.toString()\n      }\n    },\n  }\n}\n\nexport default MeetupDetails\n"]},"metadata":{},"sourceType":"module"}