{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/christianguizar/projects/react-complete-guide/nextProject/pages/[meetupId]/index.js\";\nimport { Fragment } from 'react';\nimport Head from 'next/head';\nimport { MongoClient, ObjectId } from 'mongodb';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nconst MeetupDetails = props => {\n  return /*#__PURE__*/_jsxDEV(Fragment, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n}; //pre generates of all dynamic values for what the current page can become\n\n\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect('mongodb+srv://cguizar525:Pokemon10@cluster0.bthpq.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n};\nexport const getStaticProps = async context => {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://cguizar525:Pokemon10@cluster0.bthpq.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title.toString(),\n        address: selectedMeetup.address.toString(),\n        image: selectedMeetup.image.toString(),\n        description: selectedMeetup.description.toString()\n      }\n    }\n  };\n};\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/christianguizar/projects/react-complete-guide/nextProject/pages/[meetupId]/index.js"],"names":["Fragment","Head","MongoClient","ObjectId","MeetupDetail","MeetupDetails","props","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","meetupData","id","title","address","image","description"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,sBACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,UADF;AAID,CALD,C,CAOA;;;AACA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC,QAAMC,MAAM,GAAG,MAAMN,WAAW,CAACO,OAAZ,CAAoB,mGAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAYC,MAAM,KAAK;AAC5BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADoB,KAAL,CAAlB;AAFF,GAAP;AAMD,CAhBM;AAkBP,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AAE/C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMf,MAAM,GAAG,MAAMN,WAAW,CAACO,OAAZ,CAAoB,mGAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AAACb,IAAAA,GAAG,EAAEZ,QAAQ,CAACoB,QAAD;AAAd,GAA1B,CAA7B;AAEAf,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLX,IAAAA,KAAK,EAAE;AACLuB,MAAAA,UAAU,EAAE;AACVC,QAAAA,EAAE,EAAEH,cAAc,CAACZ,GAAf,CAAmBS,QAAnB,EADM;AAEVO,QAAAA,KAAK,EAAEJ,cAAc,CAACI,KAAf,CAAqBP,QAArB,EAFG;AAGVQ,QAAAA,OAAO,EAAEL,cAAc,CAACK,OAAf,CAAuBR,QAAvB,EAHC;AAIVS,QAAAA,KAAK,EAAEN,cAAc,CAACM,KAAf,CAAqBT,QAArB,EAJG;AAKVU,QAAAA,WAAW,EAAEP,cAAc,CAACO,WAAf,CAA2BV,QAA3B;AALH;AADP;AADF,GAAP;AAWD,CAxBM;AA0BP,eAAenB,aAAf","sourcesContent":["import { Fragment } from 'react';\nimport Head from 'next/head';\n\nimport { MongoClient, ObjectId } from 'mongodb';\n\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nconst MeetupDetails = (props) => {\n  return (\n    <Fragment>\n    </Fragment>\n  );\n}\n\n//pre generates of all dynamic values for what the current page can become\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect('mongodb+srv://cguizar525:Pokemon10@cluster0.bthpq.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n\n  const meetupsCollection = db.collection('meetups');\n\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n  client.close();\n\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: { meetupId: meetup._id.toString() },\n    }))\n  }\n}\n\nexport const getStaticProps = async (context) => {\n\n  const meetupId = context.params.meetupId;\n\n  const client = await MongoClient.connect('mongodb+srv://cguizar525:Pokemon10@cluster0.bthpq.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n\n  const meetupsCollection = db.collection('meetups');\n\n  const selectedMeetup = await meetupsCollection.findOne({_id: ObjectId(meetupId)});\n\n  client.close();\n\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title.toString(),\n        address: selectedMeetup.address.toString(),\n        image: selectedMeetup.image.toString(),\n        description: selectedMeetup.description.toString()\n      }\n    },\n  }\n}\n\nexport default MeetupDetails\n"]},"metadata":{},"sourceType":"module"}